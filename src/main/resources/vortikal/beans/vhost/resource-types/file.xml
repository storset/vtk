<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

  <!-- File resource -->

  <bean id="fileResourceTypeDefinition"
    class="org.vortikal.repository.resourcetype.PrimaryResourceTypeDefinitionImpl">
    <property name="name" value="file" />
    <property name="namespace" ref="DEFAULT_NAMESPACE" />
    <property name="parentTypeDefinition" ref="resourceResourceTypeDefinition" />

    <property name="propertyTypeDefinitions">
      <list>
        <ref bean="contentTypePropDef" />
        <ref bean="contentLengthPropDef" />
      </list>
    </property>

    <property name="assertions">
      <list>
        <ref bean="fileAssertion" />
      </list>
    </property>
  </bean>

  <bean id="contentTypePropDef" class="org.vortikal.repository.resourcetype.PropertyTypeDefinitionImpl" parent="abstractPropDef">
    <property name="name" value="contentType" />
    <property name="protectionLevel" ref="PROTECTION_LEVEL_ACL_WRITE" />
    <property name="mandatory" value="true" />
    <property name="propertyEvaluator" ref="contentTypeEvaluator" />
  </bean>

  <bean id="contentTypeEvaluator" class="org.vortikal.repository.resourcetype.property.ContentTypeEvaluator">
    <property name="contentPeekRegexps">
      <map>
        <entry key="text/html">
          <map>
            <!-- 
                 Explained: for resources of type text/html, 
                 look for '{' and set content type = 'application/json'.

                 (A more sophisticated (better) solution would be to
                 use the regexp as a hint to attempt parsing the
                 content using a JSON parser.)
            -->
            <entry key="\A\s*\{" value="application/json" />
          </map>
        </entry>
        <entry key="application/octet-stream">
          <map>
            <entry key="\A\s*\{" value="application/json" />
          </map>
        </entry>
      </map>
    </property>
  </bean>

  <bean id="contentLengthPropDef" class="org.vortikal.repository.resourcetype.PropertyTypeDefinitionImpl" parent="abstractPropDef">
    <property name="name" value="contentLength" />
    <property name="type" value="LONG" />
    <property name="protectionLevel" ref="PROTECTION_LEVEL_UNEDITABLE" />
    <property name="mandatory" value="true" />
    <property name="propertyEvaluator" ref="contentLengthEvaluator" />
    <property name="defaultValue">
      <bean class="org.vortikal.repository.resourcetype.Value">
        <constructor-arg type="long">
          <value>0</value>
        </constructor-arg>
      </bean>
    </property>
  </bean>

  <bean id="contentLengthEvaluator" class="org.vortikal.repository.resourcetype.property.ContentLengthEvaluator" />

  <!-- Assertion that matches all non-collection resources (files) -->
  <bean id="fileAssertion" class="org.vortikal.web.service.ResourceIsCollectionAssertion">
    <property name="invert" value="true" />
  </bean>


  <!-- Content type assertions -->

  <bean id="contentTypeMatchesText" class="org.vortikal.web.service.ResourceContentTypeRegexpAssertion">
    <property name="pattern" value="(application/(x-)?xml)|(text/(plain|html|xml))" />
  </bean>

  <bean id="contentTypeMatchesAnyText" class="org.vortikal.web.service.ResourceContentTypeRegexpAssertion">
    <property name="pattern" value="text/.+" />
    <property name="exceptionPattern" value="text/rtf" />
  </bean>

  <!-- Assertion that matches on all textual content types: -->
  <bean id="contentTypeIsTextual" 
        class="org.vortikal.web.service.ResourceContentTypeRegexpAssertion">
    <property name="pattern" value="(application/(x-)?xml)|(application/x-php)|(application/json)|(text/(.+))" />
    <property name="exceptionPattern" value="text/rtf" />
  </bean>


  <bean id="contentTypeMatchesXml" class="org.vortikal.web.service.ResourceContentTypeRegexpAssertion">
    <property name="pattern" value="(text|application)/(x-)?xml" />
  </bean>

  <bean id="contentTypeMatchesHtml" class="org.vortikal.web.service.ResourceContentTypeRegexpAssertion">
    <property name="pattern" value="text/html" />
  </bean>

  <bean id="contentTypeMatchesTextOrHtml" class="org.vortikal.web.service.ResourceContentTypeRegexpAssertion">
    <property name="pattern" value="text/(plain|html)" />
  </bean>

  <bean id="contentTypeMatchesXmlOrHtml" class="org.vortikal.web.service.ResourceContentTypeRegexpAssertion">
    <property name="pattern" value="(application/(x-)?xml)|(text/(xml|html))" />
  </bean>

  <bean id="contentTypeMatchesXmlOrHtmlOrCollection"
    class="org.vortikal.web.service.ResourceContentTypeRegexpAssertion">
    <property name="pattern" value="(application/(x-)?xml)|(text/(xml|html))|(application/x-vortex-collection)" />
  </bean>

  <bean id="contentTypeMatchesImage" class="org.vortikal.web.service.ResourceContentTypeRegexpAssertion">
    <property name="pattern" value="image/.+" />
  </bean>

  <bean id="contentTypeMatchesAudio" class="org.vortikal.web.service.ResourceContentTypeRegexpAssertion">
    <property name="pattern" value="audio/.+" />
  </bean>
  
  <bean id="contentTypeMatchesVideo" class="org.vortikal.web.service.ResourceContentTypeRegexpAssertion">
    <property name="pattern" value="^video/.+|^application/mxf$" />
  </bean>

  <bean id="contentTypeMatchesMedia" class="org.vortikal.web.service.OrAssertion">
    <property name="assertions">
      <list>
        <ref bean="contentTypeMatchesAudio" />
        <ref bean="contentTypeMatchesVideo" />
      </list>
    </property>
  </bean>

  <bean id="contentTypeMatchesZip" class="org.vortikal.web.service.ResourceContentTypeRegexpAssertion">
    <property name="pattern" value="application/zip" />
  </bean>


  <bean id="contentTypeMatchesJar" class="org.vortikal.web.service.ResourceContentTypeRegexpAssertion">
    <property name="pattern" value="application/(?:x-)?java-archive" />
  </bean>

</beans>
